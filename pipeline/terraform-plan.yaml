parameters:
  - name: tfversion
    type: string

  - name: workingDirectory
    type: string

  - name: serviceConnection
    type: string

  - name: tfStateResourceGroup
    type: string

  - name: location
    type: string

  - name: tfStateStorageAccountName
    type: string

  - name: project
    type: string

  - name: product
    type: string

  - name: environment
    type: string

  - name: builtFrom
    type: string
  
  - name: vm_user
    type: string

  - name: vm_password
    type: string
  
steps:
  
  - task: TerraformInstaller@0
    displayName: 'Install Terraform ${{ parameters.tfversion }}'
    inputs:
          terraformVersion: ${{ parameters.tfversion }}

  - task: TerraformCLI@0
    displayName: Terraform Init
    inputs:
          command: init
          terraformVersion: ${{ parameters.tfversion }}
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/infra'
          backendType: azurerm
          backendServiceArm: ${{ parameters.serviceConnection }}
          backendAzureRmResourceGroupName: ${{ lower(parameters.tfStateResourceGroup) }}
          backendAzureRmResourceGroupLocation: ${{ parameters.location }}
          backendAzureRmStorageAccountName:  ${{ lower(parameters.tfStateStorageAccountName) }}
          backendAzureRmStorageAccountSku: Standard_LRS
          backendAzureRmContainerName: tfstate
          backendAzureRmKey: '${{ parameters.location }}/${{ parameters.project }}/${{ lower(parameters.environment) }}/terraform.tfstate'

  - task: AzureCLI@2
    displayName: 'GlobalNetworkPeering Credentials'
    name: GlobalNetworkPeering
    inputs:
      azureSubscription: 'GlobalNetworkPeering'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      addSpnToEnvironment: true
      InlineScript: |
        Write-Host "##vso[task.setvariable variable=GNP_CLIENT_ID;isOutput=true]$($env:servicePrincipalId)"
        Write-Host "##vso[task.setvariable variable=GNP_CLIENT_SECRET;isOutput=true]$($env:servicePrincipalKey)"
        Write-Host "##vso[task.setvariable variable=GNP_TENANT_ID;isOutput=true]$($env:tenantId)"
        $subscriptionId = az account show --query id -o tsv
        Write-Host "##vso[task.setvariable variable=GNP_SUBSCRIPTION_ID;isOutput=true]$subscriptionId"

  - bash: |
      variableName="vars"
      
      variables=""
      variables="${variables} -var \"network_client_id=${GNP_CLIENT_ID} \""
      variables="${variables} -var \"network_client_secret=${GNP_CLIENT_SECRET} \""
      variables="${variables} -var \"network_tenant_id=${GNP_TENANT_ID} \""
      echo "Variables set as: "
      echo "${variables}"
      echo "##vso[task.setvariable variable=variableName]${variables}"
    displayName: 'Set Shared Services TF Variables'
    name: tfVariables
    env:
      GNP_CLIENT_ID: $(GlobalNetworkPeering.GNP_CLIENT_ID) 
      GNP_CLIENT_SECRET: $(GlobalNetworkPeering.GNP_CLIENT_SECRET) 
      GNP_TENANT_ID: $(GlobalNetworkPeering.GNP_TENANT_ID) 

  - task: TerraformCLI@0
    displayName: Terraform Plan
    inputs:
          command: plan
          terraformVersion: ${{ parameters.tfversion }}
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/infra'
          environmentServiceName: ${{ parameters.serviceConnection }}
          commandOptions: >
            -out "${{ lower(parameters.environment) }}-$(Build.BuildId).tfplan"
            -var environment=${{ lower(parameters.environment) }}
            -var project=${{ parameters.project }}
            -var builtFrom=${{ parameters.builtFrom }}
            -var product=${{ parameters.product }}
            -var vm_user=${{ parameters.vm_user }}
            -var vm_password=${{ parameters.vm_password }}
            -var-file $(System.DefaultWorkingDirectory)/terraform/vars/${{ parameters.environment }}.tfvars
            $(variableName)

  - task: ArchiveFiles@2
    displayName: 'Create Plan Artifact'
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      replaceExistingArchive: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Plan Artifact'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: '$(Build.BuildId)-tfplan'
      publishLocation: 'Container'
