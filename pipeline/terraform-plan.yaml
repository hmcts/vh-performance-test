parameters:
  - name: tfversion
    type: string

  - name: workingDirectory
    type: string

  - name: serviceConnection
    type: string

  - name: tfStateResourceGroup
    type: string

  - name: location
    type: string

  - name: tfStateStorageAccountName
    type: string

  - name: project
    type: string

  - name: environment
    type: string

  - name: builtFrom
    type: string
  
steps:
  
  - task: TerraformInstaller@0
    displayName: 'Install Terraform ${{ parameters.tfversion }}'
    inputs:
          terraformVersion: ${{ parameters.tfversion }}

  - task: TerraformCLI@0
    displayName: Terraform Init
    inputs:
          command: init
          terraformVersion: ${{ parameters.tfversion }}
          workingDirectory: '${{ parameters.workingDirectory }}'
          backendType: azurerm
          backendServiceArm: ${{ parameters.serviceConnection }}
          backendAzureRmResourceGroupName: ${{ lower(parameters.tfStateResourceGroup) }}
          backendAzureRmResourceGroupLocation: ${{ parameters.location }}
          backendAzureRmStorageAccountName:  ${{ lower(parameters.tfStateStorageAccountName) }}
          backendAzureRmStorageAccountSku: Standard_LRS
          backendAzureRmContainerName: tfstate
          backendAzureRmKey: '${{ parameters.location }}/${{ parameters.project }}/${{ lower(parameters.environment) }}/terraform.tfstate'

  - task: TerraformCLI@0
    displayName: Terraform Plan
    inputs:
          command: plan
          terraformVersion: ${{ parameters.tfversion }}
          workingDirectory: $(System.DefaultWorkingDirectory)/terraform
          environmentServiceName: ${{ parameters.serviceConnection }}
          commandOptions: >
            -out $(Build.BuildId)-${{ parameters.project }}-${{ lower(parameters.environment) }}.tfplan
            -var environment=${{ lower(parameters.environment) }}
            -var project=${{ parameters.project }}
            -var builtFrom=${{ parameters.builtFrom }}
            -var product=${{ parameters.product }}
            -var-file $(System.DefaultWorkingDirectory)/terraform/vars/$(env).tfvars

  - task: ArchiveFiles@2
    displayName: 'Zip Terraform Files'
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)/terraform'
      archiveType: zip
      archiveFile: '$(Build.ArtifactStagingDirectory)/tfplan-$(Build.BuildId)-${{ parameters.project }}-${{ lower(parameters.environment) }}.zip'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Terraform Artifacts'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/tfplan-$(Build.BuildId)-${{ parameters.project }}-${{ lower(parameters.environment) }}.zip'
      publishLocation: pipeline
      artifact: 'tfplan-$(Build.BuildId)-${{ parameters.project }}-${{ lower(parameters.environment) }}'