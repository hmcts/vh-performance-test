parameters:
  - name: tfversion
    type: string
  - name: workingDirectory
    type: string
  - name: serviceConnection
    type: string
  - name: tfStateResourceGroup
    type: string
  - name: location
    type: string
  - name: tfStateStorageAccountName
    type: string
  - name: project
    type: string
  - name: environment
    type: string
  
steps:
  
  - checkout: none

  - task: TerraformInstaller@0
    displayName: 'Install Terraform ${{ parameters.tfversion }}'
    inputs:
      terraformVersion: ${{ parameters.tfversion }}

  - task: DownloadBuildArtifacts@0
    displayName: 'Download Plan Artifact'
    inputs:
      artifactName: "${{ lower(parameters.environment) }}-$(Build.BuildId)-tfplan"

  - task: ExtractFiles@1
    displayName: 'Extract Terraform Plan Artifact'
    inputs:
      archiveFilePatterns: '$(System.ArtifactsDirectory)/${{ lower(parameters.environment) }}-$(Build.BuildId)-tfplan/$(Build.BuildId).zip'
      destinationFolder: '$(System.DefaultWorkingDirectory)/'
      cleanDestinationFolder: false

  - task: TerraformCLI@0
    displayName: Terraform Init
    inputs:
      command: init
      terraformVersion: ${{ parameters.tfversion }}
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      backendType: azurerm
      backendServiceArm: ${{ parameters.serviceConnection }}
      backendAzureRmResourceGroupName: ${{ lower(parameters.tfStateResourceGroup) }}
      backendAzureRmResourceGroupLocation: ${{ parameters.location }}
      backendAzureRmStorageAccountName:  ${{ lower(parameters.tfStateStorageAccountName) }}
      backendAzureRmStorageAccountSku: Standard_LRS
      backendAzureRmContainerName: tfstate
      backendAzureRmKey: '${{ parameters.location }}/${{ parameters.project }}/${{ lower(parameters.environment) }}/terraform.tfstate'

  - ${{ if eq(parameters.environment, 'stg') }}:
    - template:  templates\Azure\Common\unlock-resource-group.yml@templates
      parameters:
        subscriptionName:  ${{ parameters.serviceConnection }}
        resourceGroupName: "vh-perf-test-stg"
        lockName: "stg-lock"

  - task: TerraformCLI@0
    displayName: Terraform Apply
    inputs:
      command: apply
      terraformVersion: ${{ parameters.tfversion }}
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/infra'
      environmentServiceName: ${{ parameters.serviceConnection }}
      commandOptions: "-input=false $(System.DefaultWorkingDirectory)/terraform/infra/${{ lower(parameters.environment) }}-$(Build.BuildId).tfplan"

